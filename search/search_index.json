{"config":{"lang":["es"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"index.html","title":"Programaci\u00f3n","text":"<p>Estos apuntes desarrollan los materiales did\u00e1cticos del m\u00f3dulo de Programaci\u00f3n (PRO). Las ense\u00f1anzas m\u00ednimas se definen en el RD 686/2010, el cual fue modificado por el RD 405/2023, y se concreta el curr\u00edculo en la Orden 50/2012 de 25 de septiembre.</p> <p>Info</p> <p>Cabe destacar las siguientes caracter\u00edsticas del m\u00f3dulo de Programaci\u00f3n:</p> <ul> <li>En la modalidad presencial la duraci\u00f3n del m\u00f3dulo es de 256 horas lectivas, a raz\u00f3n de 8 horas semanales.</li> <li>Se ha planificado bas\u00e1ndose en el horario de 1\u00ba de DAW del IES La Encant\u00e1 en Rojales, Alicante, durante el curso 2024/2025.</li> </ul>"},{"location":"index.html#objetivos-generales-de-ciclo-formativo","title":"Objetivos generales de ciclo formativo","text":"<p>El m\u00f3dulo de Programaci\u00f3n contribuye a los siguientes Objetivos Generales del Ciclo:</p> <ul> <li>e. Interpretar el dise\u00f1o l\u00f3gico, verificando los par\u00e1metros establecidos para gestionar bases de datos.</li> <li>j. Emplear herramientas y lenguajes espec\u00edficos, siguiendo las especificaciones, para desarrollar componentes multimedia.</li> <li>q. Programar y realizar actividades para gestionar el mantenimiento de los recursos inform\u00e1ticos.</li> <li>w. Evaluar situaciones de prevenci\u00f3n de riesgos laborales y de protecci\u00f3n ambiental, proponiendo y aplicando medidas de prevenci\u00f3n personales y colectivas, de acuerdo a la normativa aplicable en los procesos del trabajo, para garantizar entornos seguros.</li> </ul>"},{"location":"index.html#competencias-del-titulo","title":"Competencias del t\u00edtulo","text":"<p>El m\u00f3dulo de Programaci\u00f3n contribuye a las siguientes Competencias profesionales, personales y sociales:</p> <ul> <li>e. Desarrollar aplicaciones web con acceso a bases de datos utilizando lenguajes, objetos de acceso y herramientas de mapeo adecuados a las especificaciones.</li> <li>j. Desarrollar e integrar componentes software en el entorno del servidor web, empleando herramientas y lenguajes espec\u00edficos, para cumplir las especificaciones de la aplicaci\u00f3n.</li> <li>t. Generar entornos seguros en el desarrollo de su trabajo y el de su equipo, supervisando y aplicando los procedimientos de prevenci\u00f3n de riesgos laborales y ambientales de acuerdo con lo establecido por la normativa y los objetivos de la empresa.</li> <li>w. Ejercer sus derechos y cumplir con las obligaciones derivadas de su actividad profesional, de acuerdo con lo establecido en la legislaci\u00f3n vigente, participando activamente en la vida econ\u00f3mica, social y cultural.</li> </ul>"},{"location":"index.html#mapa-general-de-la-programacion-didactica","title":"Mapa General de la Programaci\u00f3n Did\u00e1ctica","text":"<p>A modo de resumen de la Programaci\u00f3n did\u00e1ctica (PD) de PRO, se muestra la secuenciaci\u00f3n de las Unidades de trabajo planificadas y los Resultados de aprendizaje (RRAA) tratados en cada una de dichas unidades.</p> <p>UUTT</p> <p>RA1</p> <p>RA2</p> <p>RA3</p> <p>RA4</p> <p>RA5</p> <p>RA6</p> <p>RA7</p> <p>RA8</p> <p>RA9</p> <p>Relevancia temporal</p> <p>Relevancia porcentual</p> <p>Primera Evaluaci\u00f3n</p> <p>01.Identificaci\u00f3n de los elementos de un programa inform\u00e1tico</p> <p>8</p> <p></p> <p></p> <p></p> <p></p> <p></p> <p></p> <p></p> <p></p> <p>8</p> <p>3,5%</p> <p>02.Elementos b\u00e1sicos de un lenguaje de programaci\u00f3n</p> <p>8</p> <p></p> <p></p> <p></p> <p></p> <p></p> <p></p> <p></p> <p></p> <p>8</p> <p>3,5%</p> <p>03.Estructuras de control</p> <p></p> <p></p> <p>24</p> <p></p> <p></p> <p></p> <p></p> <p></p> <p></p> <p>24</p> <p>10,3%</p> <p>04.Programaci\u00f3n modular. </p> <p></p> <p>16</p> <p></p> <p></p> <p></p> <p></p> <p></p> <p></p> <p></p> <p>16</p> <p>6,9%</p> <p>05.Estructuras b\u00e1sicas de almacenamiento. Arrays. </p> <p></p> <p></p> <p></p> <p></p> <p></p> <p>16</p> <p></p> <p></p> <p></p> <p>16</p> <p>6,9%</p> <p>06.Introducci\u00f3n a la programaci\u00f3n orientada a objetos</p> <p></p> <p>16</p> <p></p> <p>16</p> <p></p> <p></p> <p></p> <p></p> <p></p> <p>32</p> <p>13,8%</p> <p>Segunda Evaluaci\u00f3n</p> <p>07.Programaci\u00f3n orientada a objetos avanzada. Herencia, polimorfismo, interfaces. </p> <p></p> <p></p> <p></p> <p>8</p> <p></p> <p></p> <p>24</p> <p></p> <p></p> <p>32</p> <p>13,8%</p> <p>08. Control de excepciones. Funciones Lambda. Expresiones regulares.</p> <p></p> <p></p> <p>16</p> <p></p> <p></p> <p></p> <p></p> <p></p> <p></p> <p>16</p> <p>6,9%</p> <p>09. Colecciones</p> <p></p> <p></p> <p></p> <p></p> <p></p> <p>16</p> <p></p> <p></p> <p></p> <p>16</p> <p>6,9%</p> <p>10. Tratamiento de colecciones mediante programaci\u00f3n funcional.</p> <p></p> <p></p> <p></p> <p></p> <p></p> <p>16</p> <p></p> <p></p> <p></p> <p>16</p> <p>6,9%</p> <p>11. Creaci\u00f3n de aplicaciones gr\u00e1ficas.</p> <p></p> <p></p> <p></p> <p></p> <p>24</p> <p></p> <p></p> <p></p> <p></p> <p>24</p> <p>10,3%</p> <p>Tercera Evaluaci\u00f3n</p> <p>12. Conexi\u00f3n a BBDD relacionales. </p> <p></p> <p></p> <p></p> <p></p> <p></p> <p></p> <p></p> <p>12</p> <p>12</p> <p>24</p> <p>10,3%</p> <p>FCT</p> <p></p> <p></p> <p></p> <p></p> <p></p> <p></p> <p></p> <p></p> <p></p> <p></p> <p></p> <p>Resultados de aprendizaje</p> <p>RA1. Reconoce la estructura de un programa inform\u00e1tico, identificando y relacionando los elementos propios del lenguaje de programaci\u00f3n utilizado.</p> <p>16</p> <p>7%</p> <p>RA2. Escribe y prueba programas sencillos, reconociendo y aplicando los fundamentos de la programaci\u00f3n orientada a objetos.</p> <p>32</p> <p>14%</p> <p>RA3. Escribe y depura c\u00f3digo, analizando y utilizando las estructuras de control del lenguaje.</p> <p>40</p> <p>17%</p> <p>RA4. Desarrolla programas organizados en clases analizando y aplicando los principios de la programaci\u00f3n orientada a objetos.</p> <p>24</p> <p>10%</p> <p>RA5. Realiza operaciones de entrada y salida de informaci\u00f3n, utilizando procedimientos espec\u00edficos del lenguaje y librer\u00edas de clases.</p> <p>24</p> <p>10%</p> <p>RA6. Escribe programas que manipulen informaci\u00f3n seleccionando y utilizando tipos avanzados de datos.</p> <p>48</p> <p>21%</p> <p>RA7. Desarrolla programas aplicando caracter\u00edsticas avanzadas de los lenguajes orientados a objetos y del entorno de programaci\u00f3n.</p> <p>24</p> <p>10%</p> <p>RA8. Utiliza bases de datos orientadas a objetos, analizando sus caracter\u00edsticas y aplicando t\u00e9cnicas para mantener la persistencia de la informaci\u00f3n.</p> <p>12</p> <p>5,5%</p> <p>RA9. Gestiona informaci\u00f3n almacenada en bases de datos manteniendo la integridad y consistencia de los datos.</p> <p>12</p> <p>5,5%</p>"},{"location":"index.html#evaluacion","title":"Evaluaci\u00f3n","text":"<p>Para la evaluaci\u00f3n del m\u00f3dulo de Base de Datos se ponderar\u00e1n los resultados de aprendizaje respecto a los porcentajes indicados en el apartado anterior.</p> <p>Para la evaluaci\u00f3n de cada RA, emplearemos diferentes Instrumentos de Evaluaci\u00f3n (IE), como pueden ser:</p> <ul> <li>Actividades de ense\u00f1anza/aprendizaje, normalmente realizadas en el aula, acompa\u00f1adas de una r\u00fabrica. Distinguiremos las actividades de clase (AC), las cuales se calificar\u00e1n normalmente sobre una escala de 3 puntos, de las actividades de refuerzo (AR), tambi\u00e9n sobre 3 puntos para consolidar uno o varios CE no conseguidos, as\u00ed como actividades de profundizaci\u00f3n (AP) que aportar\u00e1n puntos extra al RA.</li> <li>Pr\u00e1cticas (PR) o trabajo de investigaci\u00f3n (TI), con una carga temporal variable, entre una semana o toda una unidad did\u00e1ctica. Normalmente calificados sobre 10 puntos.</li> <li>Proyectos (PY), bien de desarrollo individual o en parejas, sobre un determinado RA. Normalmente calificados sobre 30 puntos.</li> <li>Pruebas objetivas (PO). En algunos RA, y no de forma generalizada, se realizar\u00e1 una prueba objetiva (ya sea escrita o en ordenador). Normalmente calificados sobre 30 puntos.</li> </ul> <p>Para calcular la calificaci\u00f3n de cada resultado de aprendizaje, se realizar\u00e1 la media ponderada simple de los diferentes instrumentos de evaluaci\u00f3n empleados en dicho RA.</p> <p>Todas las calificaciones, tanto de los instrumentos de evaluaci\u00f3n como de los propios RA, se podr\u00e1 consultar en todo momento en la plataforma Aules del curso.</p>"},{"location":"index.html#materiales","title":"Materiales","text":"<p>A lo largo del curso, iremos trabajando diferentes materiales disponibles en este espacio web.</p> <p>Cada una de las UT comenzar\u00e1 con un resumen de la Propuesta Did\u00e1ctica que se plantea, los elementos que va a cubrir, tanto el RA o RRAA a trabajar como sus CCEE asociados.</p> <p>En cada UT, adem\u00e1s de diferentes recursos de Referencia para ampliar conocimientos, se plantean una serie de Actividades que iremos trabajando en su mayor medida en el aula. Cada una de las actividades indica el RA que cubre, los CE que trabaja as\u00ed como su calificaci\u00f3n, la cual luego se ver\u00e1 reflejada en la r\u00fabrica de la entrega dicha tarea en Aules. Adem\u00e1s, las actividades est\u00e1n codificadas con el prefijo del tipo de instrumento de evaluaci\u00f3n, as\u00ed como la unidad que cubren (por ejemplo, la actividad AC207, ser\u00e1 la 7\u00aa actividad de clase de la unidad 2).</p>"},{"location":"includes/abbreviations.html","title":"Abbreviations","text":""},{"location":"uutt/ut01/011_ProgramaLenguajes.html","title":"Programa y lenguajes de programaci\u00f3n","text":"<p>Un programa es una secuencia de instrucciones que un ordenador ejecuta para realizar alguna tarea. Parece una idea bastante simple, pero para que el ordenador pueda hacer uso de las instrucciones, deben estar escritas de forma que las pueda usar. Esto significa que los programas deben estar escritos en lenguajes de programaci\u00f3n.</p> <p>Los lenguajes de programaci\u00f3n se diferencian de los lenguajes humanos ordinarios en que son completamente inequ\u00edvocos y muy estrictos sobre lo que est\u00e1 y no est\u00e1 permitido en un programa. Las reglas que determinan lo que est\u00e1 permitido se denominan sintaxis del lenguaje. Las reglas de sintaxis especifican el vocabulario b\u00e1sico del lenguaje y c\u00f3mo se pueden construir los programas.</p>"},{"location":"uutt/ut01/011_ProgramaLenguajes.html#caracteristicas","title":"Caracter\u00edsticas","text":"<p>Los lenguajes de programaci\u00f3n, o lenguajes de alto nivel, est\u00e1n espec\u00edficamente dise\u00f1ados para programar computadores. Tiene las siguientes caracter\u00edsticas fundamentales:</p> <ul> <li>Son independientes de la arquitectura del computador.</li> <li>Normalmente, una sentencia en un lenguaje de alto nivel requiere de varias instrucciones en lenguaje m\u00e1quina.</li> <li>Utilizan notaciones cercanas a las habituales en el \u00e1mbito en que se usan.</li> </ul> <p>Como consecuencia de este alejamiento de la m\u00e1quina y acercamiento a las personas, los programas escritos en lenguajes de programaci\u00f3n no pueden ser directamente interpretados por el computador, siendo necesario realizar previamente su traducci\u00f3n a lenguaje m\u00e1quina.</p>"},{"location":"uutt/ut01/011_ProgramaLenguajes.html#el-proceso-de-traduccion","title":"El proceso de traducci\u00f3n","text":"<p>Como el computador puede interpretar y ejecutar \u00fanicamente c\u00f3digo m\u00e1quina, existen traductores que traducen programas escritos en lenguajes de programaci\u00f3n a lenguaje m\u00e1quina. El programa inicial se denomina programa fuente y el programa obtenido, programa objeto.</p> <p>La traducci\u00f3n por un compilador (la compilaci\u00f3n) consta de dos etapas fundamentales: la etapa de an\u00e1lisis del programa y la etapa de s\u00edntesis del programa objeto. El an\u00e1lisis del texto fuente implica la realizaci\u00f3n de un an\u00e1lisis del l\u00e9xico, de la sintaxis y de la sem\u00e1ntica. La s\u00edntesis del programa objeto conduce a la generaci\u00f3n de c\u00f3digo y su optimizaci\u00f3n.</p>"},{"location":"uutt/ut01/011_ProgramaLenguajes.html#compiladores-e-interpretes","title":"Compiladores e int\u00e9rpretes","text":"<p>Un compilador traduce un programa fuente, escrito en un lenguaje de alto nivel, a un programa objeto, escrito en lenguaje ensamblador o m\u00e1quina. Un int\u00e9rprete hace que un programa fuente escrito en un lenguaje vaya, sentencia a sentencia, traduci\u00e9ndose y ejecut\u00e1ndose directamente por el computador.</p>"},{"location":"uutt/ut01/011_ProgramaLenguajes.html#tipos-de-lenguajes-de-programacion","title":"Tipos de lenguajes de programaci\u00f3n","text":"Tipos de lenguajes programaci\u00f3n"},{"location":"uutt/ut01/012_LenguajeJava.html","title":"El lenguaje de programaci\u00f3n Java","text":"<p>Java es un lenguaje de programaci\u00f3n orientado a objetos desarrollado por Sun Microsystems a principios de los a\u00f1os 90. Su creador, James Gosling, lo bautiz\u00f3 como Oak. Sun deseaba disponer de un lenguaje para programar peque\u00f1os dispositivos electr\u00f3nicos (electrodom\u00e9sticos y otros aparatos electr\u00f3nicos de consumo). La dificultad de estos dispositivos es que cambian continuamente y para que un programa funcione en el siguiente dispositivo aparecido, hay que reescribir el c\u00f3digo. Por eso Sun quer\u00eda crear un lenguaje independiente del dispositivo.</p> <p>En 1995, Oak pasa a llamarse Java. El lenguaje Java debe su nombre a un tipo de caf\u00e9. En EEUU se conoce como Java al caf\u00e9, y tomarse una taza de Java es tomarse una taza de caf\u00e9. De ah\u00ed que el logotipo oficial de Java es una taza humeante de caf\u00e9.</p> Evoluci\u00f3n logo Java <p>Desde su lanzamiento en 1995 Java se da a conocer al p\u00fablico y adquiere notoriedad r\u00e1pidamente. Se comienza a hablar de Java y de sus applets. Un applet es un programa Java que se ejecuta en el contexto de una p\u00e1gina web en cualquier ordenador independientemente de su Sistema Operativo y de la arquitectura de su procesador. El entorno de ejecuci\u00f3n era relativamente seguro y los principales navegadores web pronto incorporaron la posibilidad de ejecutar applets Java incrustadas en las p\u00e1ginas web, si bien es cierto que hoy en d\u00eda ha deca\u00eddo su uso.</p> <p>Eslogan de Java</p> <p>Write Once, Run Anywhere</p> <p>En 2010 Oracle compr\u00f3 Sun Microsystems por 7.400 millones de d\u00f3lares. Java ha continuado su evoluci\u00f3n a\u00f1adiendo nuevas caracter\u00edsticas para la programaci\u00f3n web como los JSP y Servlets, los EJBs para el desarrollo de aplicaciones empresariales e introdujo adem\u00e1s las clases necesarias para la programaci\u00f3n de m\u00f3viles.</p> <p>Nota</p> <p>En este curso no veremos nada relacionado con JSP ni Servlets ni EJBs por no usarse en la actualidad m\u00e1s all\u00e1 del mantenimiento que hace alguna empresa de soluciones pasadas.</p> <p>En la actualidad existen tres distribuciones principales de Java:</p> <ul> <li>Java SE (Java Platform, Standard Edition), anteriormente conocido como J2SE. Es la versi\u00f3n est\u00e1ndar de Java y es la base de las otras distribuciones. Contiene todos los fundamentos b\u00e1sicos del lenguaje. Est\u00e1 orientada al desarrollo de aplicaciones de escritorio.</li> <li>Jakarta EE (Java Platform, Enterprise Edition), anteriormente conocido como Java EE y J2EE. Utiliza muchos de los componentes de J2SE y a\u00f1ade nuevas funcionalidades. Est\u00e1 orientada al desarrollo de servicios web, networking, aplicaciones en el lado del servidor y aplicaciones basadas en la web. Es uno de los est\u00e1ndares para el desarrollo de aplicaciones web.</li> <li>Java ME (Java Platform, Micro Edition), anteriormente conocido como J2ME. Esta distribuci\u00f3n de Java est\u00e1 orientada a la programaci\u00f3n de dispositivos m\u00f3viles, dispositivos inal\u00e1mbricos y peque\u00f1os dispositivos.</li> </ul>"},{"location":"uutt/ut01/012_LenguajeJava.html#la-maquina-virtual-de-java","title":"La m\u00e1quina virtual de Java","text":"<p>La gran innovaci\u00f3n que introdujo Java respecto a los dem\u00e1s lenguajes de programaci\u00f3n existentes que hizo posible que un programa funcionara en cualquier plataforma, fue la creaci\u00f3n de la Java Virtual Machine (JVM) o M\u00e1quina Virtual Java.</p> <p>Normalmente un programa escrito en un lenguaje de programaci\u00f3n (c\u00f3digo fuente) se debe traducir a un lenguaje entendible por la m\u00e1quina (c\u00f3digo m\u00e1quina o ejecutable). La traducci\u00f3n la realiza un programa traductor, generalmente un compilador.</p> <p>Este c\u00f3digo m\u00e1quina o c\u00f3digo ejecutable es distinto para cada arquitectura. Ordenadores con sistemas operativos y/o hardware distintos tienen distinto c\u00f3digo m\u00e1quina. Si cambia el c\u00f3digo fuente hay que realizar una compilaci\u00f3n para cada tipo de arquitectura donde ese vaya a ejecutar el programa. Para eliminar la dependencia de la m\u00e1quina:</p> <ul> <li>En Java un programa no se traduce directamente a c\u00f3digo ejecutable.</li> <li>Un programa Java se compila y se obtiene un c\u00f3digo intermedio llamado bytecode.</li> <li>El bytecode lo interpreta la M\u00e1quina Virtual de Java (JVM) y obtiene el c\u00f3digo ejecutable.</li> </ul> <p>La m\u00e1quina virtual de Java (o JVM) se distribuye gratuitamente para pr\u00e1cticamente todos los sistemas operativos. Un archivo .class (bytecode) se puede ejecutar en cualquier ordenador que tenga instalada la m\u00e1quina virtual Java.</p> <p>La JVM forma parte del JRE (Java Runtime Environment) o entorno de ejecuci\u00f3n de Java.</p>"},{"location":"uutt/ut01/012_LenguajeJava.html#caracteristicas-del-lenguaje-java","title":"Caracter\u00edsticas del lenguaje Java","text":""},{"location":"uutt/ut01/012_LenguajeJava.html#simple","title":"Simple","text":"<p>El estilo de programaci\u00f3n es simple y el c\u00f3digo es f\u00e1cil de entender. La sintaxis es similar a la de C++ y a la de otros lenguajes como C, C#, PHP... , por lo que si se conoce alguno de estos lenguajes se facilita su aprendizaje. Adem\u00e1s, cuando sabemos Java se puede aprender uno de estos lenguajes con mayor facilidad. Aunque la sintaxis sea similar a C++ elimina algunas de las caracter\u00edsticas m\u00e1s conflictivas de este lenguaje:</p> <ul> <li>No hay punteros.</li> <li>No hay sobrecarga operadores.</li> <li>No permite la herencia m\u00faltiple.</li> <li>No hay necesidad de liberar memoria manualmente. La gesti\u00f3n de memoria din\u00e1mica se hace autom\u00e1ticamente (recolector de basura).</li> </ul>"},{"location":"uutt/ut01/012_LenguajeJava.html#compilado-e-interpretado","title":"Compilado e interpretado","text":"<p>Normalmente un lenguaje es compilado o interpretado. Java es ambas cosas. El c\u00f3digo fuente se compila para obtener los bytecodes y posteriormente la m\u00e1quina virtual interpreta esos bytecodes y los convierte en c\u00f3digo m\u00e1quina.</p>"},{"location":"uutt/ut01/012_LenguajeJava.html#multiplataforma","title":"Multiplataforma","text":"<p>Java es independiente de la plataforma y puede ejecutarse en cualquier m\u00e1quina que tenga instalada la m\u00e1quina virtual de Java.</p>"},{"location":"uutt/ut01/012_LenguajeJava.html#orientado-a-objetos","title":"Orientado a objetos","text":"<p>Es un lenguaje orientado a objetos por lo que facilitar\u00e1 el dise\u00f1o y mantenimiento de programas grandes.</p>"},{"location":"uutt/ut01/012_LenguajeJava.html#robusto","title":"Robusto","text":"<p>Es capaz de manejar errores en tiempo de ejecuci\u00f3n mediante el controlador de excepciones. Utiliza un recolector de basura para eliminar de la memoria todos los objetos que ya no se usan quitando esa responsabilidad al programador. Realiza la comprobaci\u00f3n de tipos en cualquier operaci\u00f3n avisando si intervienen tipos incompatibles lo que hace que se eviten errores de c\u00e1lculo. Al no haber punteros, no se puede acceder de forma directa a la memoria del ordenador.</p>"},{"location":"uutt/ut01/012_LenguajeJava.html#multitarea","title":"Multitarea","text":"<p>Permite crear programas con varios hilos (threads) de ejecuci\u00f3n. Esto quiere decir que puede ejecutar diferentes l\u00edneas de c\u00f3digo al mismo tiempo lo que permite aprovechar las caracter\u00edsticas de los procesadores con m\u00faltiples n\u00facleos. Los hilos son importantes en programaci\u00f3n multimedia, aplicaciones web, etc.</p>"},{"location":"uutt/ut01/012_LenguajeJava.html#que-necesito-para-programar-en-java","title":"\u00bfQu\u00e9 necesito para programar en Java?","text":"<p>A la hora de empezar a programar en Java necesitamos:</p> <ol> <li> <p>El JDK (Java Development Kit o Kit de Desarrollo en Java). Es el software que nos permite crear aplicaciones Java de distintos tipos. Es lo primero que debemos tener instalado en nuestro ordenador. El JDK incluye:</p> <ul> <li>El JRE (Java Runtime Environment). Es la m\u00e1quina virtual de Java que traduce el bytecode a c\u00f3digo ejecutable.</li> <li>El compilador de Java. Es el encargado de convertir nuestro c\u00f3digo fuente a bytecode.</li> <li>API de Java (Application Programming Interface). Contiene todos los paquetes, clases e interfaces del lenguaje Java. Es el c\u00f3digo que proporciona Java para que el programador desarrolle sus propias aplicaciones.</li> </ul> <p>El entorno JDK funciona \u00fanica y exclusivamente mediante comandos de consola:</p> <ul> <li><code>javac</code> Es el comando compilador de Java. Su sintaxis es: <code>javac ejemplo.java</code> La entrada de este comando ha de ser necesariamente un fichero que contenga c\u00f3digo escrito en lenguaje Java y con extensi\u00f3n .java. El comando nos crear\u00e1 un fichero .class por cada clase que contenga el fichero Java.</li> <li><code>java</code> Es el int\u00e9rprete de Java. Permite ejecutar aplicaciones que previamente hayan sido compiladas y transformadas en ficheros .class. Su sintaxis es: <code>java ejemplo</code>. No es necesario aqu\u00ed suministrar la extensi\u00f3n del fichero, ya que siempre ha de ser un fichero .class.</li> </ul> </li> <li> <p>Un IDE (Integrated Development Environment). Los entornos de desarrollo son herramientas software que ayudan al programador el desarrollo de los programas avanzados. Entre otras muchas funciones, un entorno de desarrollo contiene distintas herramientas en una sola interfaz gr\u00e1fica. Generalmente contiene:</p> <ul> <li>Un editor de texto que ayuda a escribir el c\u00f3digo resaltando la sintaxis con indicaciones visuales.</li> <li>Un depurador que sirve para probar y depurar el c\u00f3digo.</li> <li>Herramientas para compilar y ejecutar el programa.</li> </ul> <p>Mediante un IDE, el desarrollador de aplicaciones puede escribir, compilar y ejecutar programas de forma sencilla.</p> </li> </ol>"},{"location":"uutt/ut01/012_LenguajeJava.html#actividades","title":"Actividades","text":"<ul> <li> <p>AC 101 (RA1 / CE1a / IC1 / 3p) Crea un fichero llamado <code>HolaMundo.java</code>. Guarda el archivo \"HolaMundo.java\" en una ubicaci\u00f3n de tu elecci\u00f3n en tu sistema. Abre la terminal o l\u00ednea de comandos de tu sistema operativo. Navega hasta la ubicaci\u00f3n donde guardaste el archivo <code>HolaMundo.java</code>. Compila el fichero desde la consola o terminal usando el compilador de Java.</p> <p>Entrega</p> <p>Adem\u00e1s de los ficheros, responde a las siguientes cuestiones:</p> <ul> <li>a) \u00bfSe ha generado alg\u00fan fichero extra al realizar el paso de compilaci\u00f3n?, Si es as\u00ed, \u00bfc\u00f3mo se llama el fichero compilado?</li> <li>b) \u00bfQu\u00e9 incluye dicho fichero?</li> <li>c) Si ahora quisiera ejecutar el programa HolaMundo desde otro sistema operativo \u00bfqu\u00e9 pasos tendr\u00eda que realizar?</li> </ul> <p>Crea capturas de pantalla donde se vea el resultado de ejecutar el programa HolaMundo.</p> </li> <li> <p>AC 102 (RA1 / CE1a / IC1 / 3p) Crea dos archivos Java, uno llamado <code>Calculadora.java</code> y otro <code>MainApp.java</code>, con el siguiente c\u00f3digo:</p> <p>Calculadora.java<pre><code>public class Calculadora {\n    public static int sumar(int a, int b){\n        return a+b;\n    }\n    public static int restar (int a, int b){\n        return a-b; \n    }\n    public static int multiplicar (int a, int b){\n        return a*b;\n    }\n    public static int dividir (int a, int b){\n        if(b != 0){ \n            return a/b;\n        }else{ \n            System.out.println(\"Error\");\n            return 0;\n        }\n    }\n}\n</code></pre> MainApp.java<pre><code>public class MainApp {\n    public static void main(String[] args) {\n        if (args.length != 3) {\n            System.out.println(\"Uso incorrecto. Debes proporcionar dos n\u00fameros y una operaci\u00f3n.\"); \n            System.out.println(\"Ejemplo: java MainApp 5 + 3\");\n            return;\n        }\n\n        int num1 = Integer.parseInt(args[0]); \n        String operacion = args[1];\n        int num2 = Integer.parseInt(args[2]);\n        int resultado = 0;\n\n        switch (operacion) {\n            case \"+\":\n                resultado = Calculadora.sumar(num1, num2); \n                break;\n            case \"-\":\n                resultado = Calculadora.restar(num1, num2); \n                break;\n            case \"*\":\n                resultado = Calculadora.multiplicar(num1, num2); \n                break;\n            case \"/\":\n                resultado = Calculadora.dividir(num1, num2); \n                break;\n            default:\n                System.out.println(\"Operaci\u00f3n no v\u00e1lida. Las operaciones v\u00e1lidas son +, -, *, y /.\"); \n                return;\n        }\n        System.out.println(\"Resultado: \" + resultado); \n    }\n}\n</code></pre></p> <p>Info</p> <p>Guarda ambos archivos en la misma ubicaci\u00f3n. Abre la terminal o l\u00ednea de comandos y navega hasta la ubicaci\u00f3n donde guardaste los archivos. Compila ambos archivos Java  Una vez que la compilaci\u00f3n se complete sin errores, puedes ejecutar el programa MainApp con argumentos de l\u00ednea de comandos. </p> <p>Por ejemplo, para sumar 5 y 3, escribe: <code>java MainApp 3 + 5</code></p> <p>Entrega</p> <ul> <li>a) Experimenta con diferentes operaciones (+, -, *, /) y n\u00fameros para ver c\u00f3mo funciona la calculadora simple y realiza capturas de pantalla.</li> <li>b) Mirando el c\u00f3digo, \u00bfqu\u00e9 l\u00edneas de c\u00f3digo contienen los n\u00fameros que se ejecutan por l\u00ednea de comandos?</li> <li>c) \u00bfQu\u00e9 pasa cuando haces una operaci\u00f3n que no existe? Realiza capturas de pantalla.</li> </ul> </li> <li> <p>AR 103 (RA1 / CE1a / IC1 / 1p) Genera la clase <code>Programa103.java</code>, este programa ha de devolver un saludo con el nombre que se le pase por par\u00e1metro a trav\u00e9s del terminal.</p> </li> <li> <p>AR 104 (RA1 / CE1a / IC1 / 1p) Genera la clase <code>Programa104.java</code>, este programa ha de devolver el d\u00eda que se le pase por par\u00e1metro a trav\u00e9s del terminal.</p> </li> <li> <p>AP 105 (RA1 / CE1a / IC1 / 3p) Escribe un nuevo programa <code>Programa105.java</code> que muestre el promedio de tres n\u00famero, por ejemplo, se le pasa por terminal 9, 7 y 5 y ha de mostrar el promedio.</p> </li> <li> <p>AP 106 (RA1 / CE1a / IC1 / 3p) Escribe un nuevo programa <code>Programa106.java</code> el cuadrado del n\u00famero introducido, por ejemplo, se le pasa por terminal 9, debe devolver 81.</p> </li> </ul>"},{"location":"uutt/ut01/013_Estructura.html","title":"Estructura y bloques fundamentales de un programa","text":"<p>Para solucionar un problema real, es necesario encontrar un m\u00e9todo de resoluci\u00f3n del problema y, posteriormente, descomponerlo en acciones sencillas, que el ordenador sea capaz de realizar.</p> <p>El pseudoc\u00f3digo es un lenguaje que permite pasar casi de manera directa la soluci\u00f3n del problema a un lenguaje de programaci\u00f3n espec\u00edfico. El pseudoc\u00f3digo es una serie de pasos bien detallados y claros que conducen a la resoluci\u00f3n de un problema. La facilidad de pasar casi de forma directa el pseudoc\u00f3digo a la computadora ha dado como resultado que muchos programadores implementen de forma directa los programas en la computadora.</p> <p>Ejemplo volumen</p> <p>Escribe el pseudoc\u00f3digo para determinar el volumen de una caja de dimensiones A, B y C. Para ello podemos resolverlo con el siguiente pseudoc\u00f3digo:</p> <ol> <li>Inicio</li> <li>Leer las medidas A, B y C</li> <li>Realizar el producto de A * B * C y guardarlo en V (V = A * B * C)</li> <li>Escribir el resultado V</li> <li>Fin</li> </ol>"},{"location":"uutt/ut01/013_Estructura.html#concepto-de-algoritmo","title":"Concepto de algoritmo","text":"<p>No todos los m\u00e9todos de soluci\u00f3n de un problema son susceptibles de ser utilizados por un computador. Para que un procedimiento pueda ser implementado en un computador debe cumplir determinados requisitos:</p> <ul> <li>Ha de estar compuesto de acciones bien definidas.</li> <li>Debe estar formado por una secuencia finita de operaciones con un orden definido.</li> <li>Por \u00faltimo, debe acabar en un tiempo finito.</li> </ul> <p>Se puede dar la siguiente definici\u00f3n de algoritmo: un algoritmo es un procedimiento no ambiguo que resuelve un problema. Un procedimiento es una secuencia de operaciones bien definidas, cada una de las cuales requiere una cantidad finita de memoria y se realiza en un tiempo finito.</p> <p>Ejemplo n\u00famero par</p> <p>Escribe un algoritmo que determine si un n\u00famero es par. Siendo N un n\u00famero cualquiera.</p> <ol> <li>Leer N</li> <li>Si N=2 entonces Escribe (\u201ces par\u201d)</li> <li>Si N=1 entonces Escribe (\u201ces impar\u201d)</li> <li>N=N-2</li> <li>Si N&gt;0 ir a 2</li> <li>Fin</li> </ol> <p>Para resolver un mismo problema, se pueden definir infinidad de algoritmos. Normalmente interesa, no solo encontrar un algoritmo, sino que este sea suficientemente bueno. La bondad de un algoritmo puede medirse por dos factores:</p> <ul> <li>El tiempo que se necesita para ejecutarlo. Est\u00e1 en relaci\u00f3n con el n\u00famero de instrucciones de cada tipo necesarias.</li> <li>Los recursos que se necesitan para implementar el algoritmo.</li> </ul> <p>No hay ning\u00fan procedimiento riguroso que permita construir un algoritmo que resuelva un problema dado, teniendo gran importancia la imaginaci\u00f3n y experiencia de la persona que lo realiza.</p> <p>Ejemplo n\u00famero par m\u00e1s eficiente</p> <p>Escribe un algoritmo que determine si un n\u00famero es par. Siendo N un n\u00famero cualquiera.</p> <ol> <li>Leer N</li> <li>M=2*int(N/2)</li> <li>Si M=N entonces Escribe (\u201ces par\u201d)</li> <li>Si no entonces Escribe (\u201ces impar\u201d)</li> <li>Fin</li> </ol>"},{"location":"uutt/ut01/013_Estructura.html#diagrama-de-flujo","title":"Diagrama de flujo","text":"<p>Los diagramas de flujo permiten representar visualmente qu\u00e9 operaciones se requieren y en qu\u00e9 secuencia se deben efectuar para solucionar un problema dado. Dentro de los diagramas de flujo se pueden utilizar los s\u00edmbolos que se presentan a continuaci\u00f3n, con los cuales se indican las operaciones que se efectuar\u00e1n sobre los datos para producir un resultado La importancia de usar unos s\u00edmbolos est\u00e1ndares, est\u00e1 en que cualquiera puede entender nuestro diagrama o bien nosotros comprender lo que se nos pide programar.</p> <p>En todo diagrama de flujo se acompa\u00f1ar\u00e1 con una tabla en la que se especificar\u00e1: nombre de variable, una descripci\u00f3n y tipo.</p>"},{"location":"uutt/ut01/013_Estructura.html#estructuras-secuenciales","title":"Estructuras secuenciales","text":"<p>En este tipo de estructura las instrucciones se realizan o se ejecutan una despu\u00e9s de la otra y, por lo general, se espera que se proporcione uno o varios datos, los cuales son asignados a variables para que con ellos se produzcan los resultados que representen la soluci\u00f3n del problema.</p>"},{"location":"uutt/ut01/013_Estructura.html#estructuras-selectivas","title":"Estructuras selectivas","text":"<p>Hasta ahora s\u00f3lo hemos resuelto problemas que se pod\u00edan hacer de manera secuencial. Pero, \u00bfqu\u00e9 pasar\u00eda si quiere hacer un algoritmo que me resuelva un problema que requiere elegir? Es por ello que los algoritmos, en determinados momentos, requieren ser selectivos en lo que respecta a las acciones que deben seguir. De aqu\u00ed que las estructuras selectivas para los algoritmos sean tan importantes, de modo que en la mayor\u00eda de los problemas se tiene presente una estructura selectiva, que implica seguir o no un determinado flujo de secuencia del problema.</p> <p>En los algoritmos para la soluci\u00f3n de problemas donde se utilizan estructuras selectivas se emplean frases que est\u00e1n estructuradas de forma adecuada dentro del pseudoc\u00f3digo.</p>"},{"location":"uutt/ut01/013_Estructura.html#estructuras-repetitivas","title":"Estructuras repetitivas","text":"<p>De igual forma se pueden presentar muchos casos donde el proceso se debe repetir varias veces. Por tal motivo se emplean estructuras denominadas repetitivas, de ciclo o de bucle, e independientemente del nombre que se les aplique, lo que importa es que permiten que un proceso pueda realizarse N veces, donde solo cambien los par\u00e1metros que se utilizan en el proceso.</p> <p>Cuando se requiere que un proceso se efect\u00fae de manera c\u00edclica, se emplean estructuras que permiten el control de ciclos. Estas estructuras se utilizan en base a las condiciones propias de cada problema, los nombres con los que se conocen son: \u201cMientras\u201d, \u201cRepite hasta\u201d y \u201cDesde ... hasta\u201d.</p>"},{"location":"uutt/ut01/013_Estructura.html#cuando-uso-cada-una","title":"\u00bfCu\u00e1ndo uso cada una?","text":"<p>Con estas estructuras bases podemos llegar a representar cualquier tipo de problema que pueda ser resuelto por un ordenador. No hay que hacer un mal uso de las mismas, pues cada una tiene una funcionalidad asociada.</p> <p>No usar\u00e9 una secuencial cuando tengo que hacer una elecci\u00f3n. Del mismo modo que no usar\u00e9 una repetitiva si es una sola secuencia.</p> <p>Hay que tener en cuenta la optimizaci\u00f3n y el rendimiento de los algoritmos que desarrollemos, pues esto nos ayudar\u00e1 a simplificar el c\u00f3digo y a ahorrar recursos. Un programa ser\u00e1 mejor o peor en cuanto su algoritmo est\u00e9 optimizado de una manera u otra.</p> <p>Ellen Ullman</p> <p>Programming is the art of algorithm design and the craft of debugging errant code.</p>"},{"location":"uutt/ut01/013_Estructura.html#actividades","title":"Actividades","text":"<ul> <li> <p>AC 107 (RA1 / CE1a / IC1 / 3p) Abre tu navegador y accede a la URL: www.draw.io. Se abrir\u00e1 un software para realizar diagramas online. Realiza el diagrama de flujo y el pseudoc\u00f3digo del proceso de c\u00e1lculo del \u00e1rea de un rect\u00e1ngulo, tomando b y a como su base y altura, y teniendo en cuenta que el \u00e1rea es A = b*a.</p> <p>Entrega</p> <p>Realiza un documento donde se identifique la actividad y contenga: </p> <ul> <li>Diagrama de flujo</li> <li>Pseudoc\u00f3digo</li> <li>Tipo de variables</li> </ul> </li> <li> <p>AC 108 (RA1 / CE1a / IC1 / 3p) Abre tu navegador y accede a la URL: www.draw.io. Se abrir\u00e1 un software para realizar diagramas online. Realiza el diagrama de flujo y escribe el pseudoc\u00f3digo del proceso de compra de un producto en un supermercado, teniendo como variables (de tipo real) CP (coste del producto), CDC (cantidad de dinero del cliente) y D(devoluci\u00f3n). Recuerda indicar primero el tipo de variables que utilizas.</p> </li> <li> <p>AR 109 (RA1 / CE1a / IC1 / 1p) Abre tu navegador y accede a la URL: www.draw.io. Se abrir\u00e1 un software para realizar diagramas online. Se requiere obtener el \u00e1rea (A) de una circunferencia de radio R, sabiendo que A = PI*R2 . Realiza el algoritmo correspondiente y repres\u00e9ntalo mediante un diagrama de flujo y el pseudoc\u00f3digo correspondiente. Recuerda indicar las variables</p> </li> <li> <p>PR 110 (RA1 / CE1a / IC1 / 5p) El consultorio del Dr. Lorenzo tiene como pol\u00edtica cobrar al paciente en funci\u00f3n del n\u00famero de citas o consultas (NC), de la siguiente forma:</p> <ul> <li>Las tres primeras citas a 50 \u20ac/cita.</li> <li>Las siguientes dos citas a 40 \u20ac/cita.</li> <li>Las restantes a 30 \u20ac/cita, mientras dure el tratamiento.</li> </ul> <p>Se requiere un \u00fanico algoritmo para determinar cu\u00e1nto pagar\u00e1 el paciente por cada cita (CC) y el total (TOTAL) de lo que ha pagado por el tratamiento. Para la soluci\u00f3n de este problema se necesita saber inicialmente cu\u00e1ntas citas se efectuar\u00e1n, y con ello se podr\u00e1 determinar el costo que tendr\u00e1 cada cita y cu\u00e1nto se ha gastado en el tratamiento.</p> </li> <li> <p>PR 111 (RA1 / CE1a / IC1 / 5p) Se requiere un algoritmo para determinar, de N cantidades, cu\u00e1ntas son menores o iguales a cero y cu\u00e1ntas mayores a cero. Realiza el diagrama de flujo y escribe su pseudoc\u00f3digo utilizando los ciclos:</p> <ul> <li>a. Mientras.</li> <li>b. Repite hasta. </li> <li>c. Desde...hasta.</li> </ul> </li> </ul>"},{"location":"uutt/ut01/014_IDE.html","title":"Entornos Integrados de Desarrollo (IDE)","text":"<p>Para programar s\u00f3lo se necesita un simple bloc de notas o editor de texto. En el caso de Java un compilador. Pero la escritura y compilaci\u00f3n de programas hecha de esta forma es un poco incomoda. Por ello numerosas empresas fabrican sus propios entornos de edici\u00f3n, algunos incluyen el compilador y otras utilizan el propio JDK de Oracle.</p> <p>Algunas ventajas que ofrecen son:</p> <ul> <li>Facilidades para escribir c\u00f3digo.</li> <li>Facilidades de depuraci\u00f3n.</li> <li>Facilidad de configuraci\u00f3n del sistema.</li> <li>Facilidades para organizar los archivos de c\u00f3digo.</li> <li>Facilidad para exportar e importar proyectos</li> </ul>"},{"location":"uutt/ut01/014_IDE.html#netbeans","title":"Netbeans","text":"<p>Uno de los IDE Java m\u00e1s populares. Es un entorno gratuito de c\u00f3digo abierto para la generaci\u00f3n de c\u00f3digo en diversos lenguajes. Contiene pr\u00e1cticamente todo lo que se suele pedir a un entorno de desarrollo, editor avanzado de c\u00f3digo, depurador, diversos lenguajes, extensiones de todo tipo, etc. Tiene una arquitectura extensible con m\u00f3dulos espec\u00edficos para desarrollo web, aplicaciones m\u00f3viles, dise\u00f1o UML, etc.</p>"},{"location":"uutt/ut01/014_IDE.html#eclipse","title":"ECLIPSE","text":"<p>Junto a NetBeans, el entorno de desarrollo Java gratuito m\u00e1s utilizado. Es un entorno completo de c\u00f3digo abierto. Tambi\u00e9n permite el desarrollo en C++ y otros lenguajes de programaci\u00f3n.</p>"},{"location":"uutt/ut01/014_IDE.html#intellij-idea","title":"IntelliJ IDEA","text":"<p>Entorno de desarrollo completo creado por JetBrains para la creaci\u00f3n de software y est\u00e1 disponible en dos versiones, una versi\u00f3n para la comunidad y otra versi\u00f3n comercial.</p>"},{"location":"uutt/ut01/014_IDE.html#visual-studio-code","title":"Visual Studio Code","text":"<p>Editor de c\u00f3digo fuente ligero pero eficaz. Incluye compatibilidad integrada con JavaScript, TypeScript y Node.js, y cuenta con un amplio ecosistema de extensiones para otros lenguajes (como C++, C#, Java, Python, Go, .NET).</p>"},{"location":"uutt/ut01/Referencias.html","title":"Referencias","text":"<ul> <li>Web: Getting Started with Java in VS Code</li> <li>Web: Java (programming language)</li> <li>Web: Escribe tu primer Hola Mundo en Java</li> <li>Web: \u00bfQu\u00e9 es un diagrama de flujo? por LucidChart</li> <li>Web: \u00bfQu\u00e9 es un diagrama de flujo? por Miro</li> </ul>"},{"location":"uutt/ut01/Referencias.html#links-de-interes","title":"Links de inter\u00e9s","text":"<ul> <li>V\u00eddeo: What is Java and Why Do I Need It?</li> <li>V\u00eddeo: Why Java Is So Hard To Learn</li> </ul>"},{"location":"uutt/ut01/ResumenUT.html","title":"Propuesta did\u00e1ctica","text":""},{"location":"uutt/ut01/ResumenUT.html#resultado-de-aprendizaje","title":"Resultado de aprendizaje","text":"RA1.CE <ul> <li>Reconoce la estructura de un programa inform\u00e1tico, identificando y relacionando los elementos propios del lenguaje de programaci\u00f3n utilizado.</li> </ul> <ul> <li>a. Se han identificado los bloques que componen la estructura de un programa inform\u00e1tico.</li> </ul>"},{"location":"uutt/ut01/ResumenUT.html#contenidos","title":"Contenidos","text":"<p>La presente UT tratar\u00e1 los siguientes contenidos:</p> <ol> <li> <p>Programa y lenguajes de programaci\u00f3n</p> <ol> <li>Caracter\u00edsticas</li> <li>El proceso de traducci\u00f3n </li> <li>Compiladores e int\u00e9rpretes</li> <li>Tipos de lenguajes de programaci\u00f3n</li> </ol> </li> <li> <p>El lenguaje de programaci\u00f3n Java </p> <ol> <li>La m\u00e1quina virtual de Java</li> <li>Caracter\u00edsticas del lenguaje Java</li> <li>\u00bfQu\u00e9 necesito para programar en Java?</li> </ol> </li> <li> <p>Estructura y bloques fundamentales de un programa</p> <ol> <li>Concepto de algoritmo</li> <li>Diagramas de flujo</li> <li>Estructuras secuenciales</li> <li>Estructuras selectivas</li> <li>Estructuras repetitivas</li> </ol> </li> <li> <p>Entornos Integrados de Desarrollo (IDE)</p> </li> </ol>"},{"location":"uutt/ut01/ResumenUT.html#programacion-de-aula","title":"Programaci\u00f3n de aula","text":"<p>Sesi\u00f3n</p> <p>Fecha</p> <p>Conceptos</p> <p>Actividades</p> <p>01</p> <p>09/09/2024</p> <p>1.1. Programa y lenguajes de programaci\u00f3n</p> <p></p> <p>02</p> <p>09/09/2024</p> <p>1.2. El lenguaje de programaci\u00f3n Java</p> <p>AC 101AC 102</p> <p>03</p> <p>10/09/2024</p> <p></p> <p>AR 103AP 106</p> <p>04</p> <p>11/09/2024</p> <p>1.3. Estructura y bloques fundamentales de un programa 1.4. IDE</p> <p>AC 107AC 108</p> <p>05</p> <p>11/09/2024</p> <p></p> <p>AC 109</p> <p>06</p> <p>12/09/2024</p> <p></p> <p>PR 110</p> <p>07</p> <p>12/09/2024</p> <p></p> <p>PR 111</p> <p>08</p> <p>13/09/2024</p> <p></p> <p>PO UT 01</p>"},{"location":"uutt/ut02/021_TiposDatos.html","title":"Tipos de datos","text":"<p>Un tipo de datos es un conjunto de valores y un conjunto de operaciones definidas en ellos. Se pueden clasificar en primitivos y objetos.</p>"},{"location":"uutt/ut02/021_TiposDatos.html#tipos-nativos","title":"Tipos nativos","text":"<p>Los primitivos son los m\u00e1s b\u00e1sicos y fundamentales, vienen integrados en Java. Especifican el tipo de valor almacenado en una variable y el tama\u00f1o de la memoria. Hay 8 tipos primitivos de datos integrados en el lenguaje Java. Estos incluyen: int, byte, short, long, float, double, boolean y char.</p>"},{"location":"uutt/ut02/021_TiposDatos.html#byte","title":"byte","text":"<p>Como su propio nombre denota, emplea un solo byte (8 bits) de almacenamiento. Esto permite almacenar valores en el rango [-128, 127]. Raramente se usa. Ocupa menos memoria y puede ser m\u00e1s r\u00e1pido accedido.</p>"},{"location":"uutt/ut02/021_TiposDatos.html#short","title":"short","text":"<p>Usa el doble de almacenamiento que el anterior, es decir, ocupa 16 bits [-32.768, 32.767].</p>"},{"location":"uutt/ut02/021_TiposDatos.html#int","title":"int","text":"<p>Emplea 4 bytes (32 bits) de almacenamiento y es el tipo de dato entero m\u00e1s empleado. Necesita cuatro veces el espacio que ocupa un byte. Es el entero predeterminado usado en Java.</p>"},{"location":"uutt/ut02/021_TiposDatos.html#long","title":"long","text":"<p>Es el tipo entero de mayor tama\u00f1o, 8 bytes (64 bits). </p>"},{"location":"uutt/ut02/021_TiposDatos.html#float","title":"float","text":"<p>Tiene una parte flotante que sirve para expresar n\u00fameros decimales. Es de simple precisi\u00f3n (formato y cantidad de espacio que ocupa) porque ocupa 32 bits. No se recomienda mucho su uso.</p>"},{"location":"uutt/ut02/021_TiposDatos.html#double","title":"double","text":"<p>Es un n\u00famero de precisi\u00f3n doble y ocupa 64 bits. Es el flotante predeterminado en Java. Se recomienda su uso. Muchas librer\u00edas internas de Java, relacionadas con operaciones matem\u00e1ticas, usan double.</p>"},{"location":"uutt/ut02/021_TiposDatos.html#char","title":"char","text":"<p>Se utiliza para almacenar caracteres (letras, n\u00fameros, signos, etc.) individuales. Ocupa 2 bytes en memoria (16 bits). Permite almacenar caracteres Unicode. Unicode es un est\u00e1ndar de codificaci\u00f3n internacional que nos permite representar diferentes idiomas; y la forma en que funciona es usando una combinaci\u00f3n de los dos bytes que un char ocupa en la memoria, que puede representar hasta 65535 diferentes tipos de caracteres</p> <p>Un car\u00e1cter precedido por una barra invertida (<code>\\</code>) es una secuencia de escape y tiene un significado especial para el compilador. </p>"},{"location":"uutt/ut02/021_TiposDatos.html#boolean","title":"boolean","text":"<p>S\u00f3lo permite almacenar dos posibles valores que son true o false. Tiene la finalidad de facilitar el trabajo con valores \"verdadero/falso\" (booleanos), resultantes por regla general de evaluar expresiones.</p> <p>Este tipo de datos representa un bit de informaci\u00f3n, pero su \"tama\u00f1o\" no es algo que est\u00e9 definido con precisi\u00f3n.</p>"},{"location":"uutt/ut02/021_TiposDatos.html#wrapper-classes-clases-contenedores","title":"Wrapper classes (clases contenedores)","text":"<p>Las clases contenedoras proporcionan una forma de utilizar tipos de datos primitivos como objetos. En Java, tenemos una <code>Wrapper class</code> para cada uno de los 8 tipos de datos primitivos, estas clases las veremos m\u00e1s avanzado el curso.</p>"},{"location":"uutt/ut02/021_TiposDatos.html#string","title":"String","text":"<p>Un String es un tipo de dato no primitvo que, en Java representa una cadena de caracteres no modificable. Todos los literales de la forma \"cualquier texto\", es decir, literales entre comillas dobles, que aparecen en un programa java se implementan como objetos de la clase String.</p> <p>Tres manera de usarlos</p> <ul> <li>Comillas dobles p. ej. String texto = \"IES La Encant\u00e1\";</li> <li>Utilizando new p. ej. String texto2 = new String (\"IES La Encant\u00e1\"); </li> <li>Utilizando el operador concatenaci\u00f3n <code>+</code> p. ej. String s2 = texto + \" 2024\u201d;     //s2 contiene \"IES La Encant\u00e1 2023\"</li> </ul>"},{"location":"uutt/ut02/021_TiposDatos.html#operador-concatenacion","title":"Operador concatenaci\u00f3n","text":"<p>La clase proporciona el operador <code>+</code> (concatenaci\u00f3n) para unir dos o m\u00e1s String. El resultado de aplicar este operador es un nuevo String concatenaci\u00f3n de los otros. </p>"},{"location":"uutt/ut02/021_TiposDatos.html#indices","title":"\u00cdndices","text":"<p>Cada uno de los caracteres que forman un String son del tipo primitivo char. Los caracteres de un string est\u00e1n numerados internamente con \u00edndices empezando desde el cero:</p> <p>El primer car\u00e1cter tiene \u00edndice 0 y el \u00faltimo tiene la longitud del string menos 1.</p>"},{"location":"uutt/ut02/021_TiposDatos.html#metodos-de-la-clase-string","title":"M\u00e9todos de la clase String","text":"<p>La clase String proporciona m\u00e9todos para el tratamiento de las cadenas de caracteres: acceso a caracteres individuales, buscar y extraer una subcadena, copiar cadenas, convertir cadenas a may\u00fasculas o min\u00fasculas, etc.</p> <p>\u00bfC\u00f3mo los uso?</p> <p>Para acceder a alguno de los m\u00e9todos siguientes utilizamos la notaci\u00f3n <code>.</code></p> <pre><code>String texto = \"Clase\";\nint longitud = texto.length(); //devuelve 5 \n</code></pre>"},{"location":"uutt/ut02/021_TiposDatos.html#comparar-strings","title":"Comparar Strings","text":"<p>Los operadores relacionales como <code>==</code> o <code>&lt;</code> o <code>&gt;</code> no se utilizan para comparar Strings, aunque el c\u00f3digo compile no es correcto, ya que <code>==</code> compara objetos, y devolver\u00eda falso aunque dos strings tuvieran el mismo texto puesto que son objetos diferentes. Para comparar <code>Strings</code> utilizamos el m\u00e9todo <code>equals</code>.</p> <p><pre><code>String name = \"Luffy\";\n\n  if (name.equals(\"Luffy\")) {\n    System.out.println(\"Coincide.\");\n  }\n</code></pre> La siguiente tabla muestra los m\u00e9todos que se utilizan para comparar <code>String</code></p>"},{"location":"uutt/ut02/021_TiposDatos.html#char-dentro-de-string","title":"char dentro de String","text":"<p>Como se ha comentado, un <code>String</code> est\u00e1 compuesto de caracteres tipo <code>char</code>. Para acceder a los caracteres dentro de un <code>String</code> usamos el m\u00e9todo <code>charAt()</code>. Se puede usar la concatenaci\u00f3n <code>+</code> para concatenar <code>char</code> con <code>String</code>.</p> <pre><code>String food = \"cookie\";\nchar firstLetter = food.charAt(0); // 'c'\nSystem.out.println(firstLetter + \" is for \" + food); \n</code></pre>"},{"location":"uutt/ut02/021_TiposDatos.html#char_1","title":"char","text":"<p>A todos los valores char se les asigna un n\u00famero internamente por el ordenador, son los llamados valores ASCII</p> <p>Cuidando con sumar enteros</p> <p>Mezclar tipos de datos char e int autom\u00e1ticamente causa una conversi\u00f3n en entero. </p> <p>'a' + 10 --&gt; devuelve 107.</p> <p>Para convertir un entero en su equivalente a car\u00e1cter (char) har\u00edamos:</p> <p>(char) ('a' + 2) --&gt; devuelve 'c'</p>"},{"location":"uutt/ut02/021_TiposDatos.html#diferencias-entre-char-y-string","title":"Diferencias entre char y String","text":"<ul> <li><code>String</code> es un objeto, por tanto, contiene m\u00e9todos.</li> <li><code>char</code> es un tipo de dato primitivo, no puedes llamar a m\u00e9todos con \u00e9l.</li> <li><code>String</code> utiliza comillas dobles.</li> <li><code>char</code> utiliza comillas simples.</li> <li>No se puede comparar un <code>String</code> usando operadores relacionales.</li> <li>S\u00ed se puede comparar un <code>char</code> usando operadores relacionales: <code>'a' &lt; 'b', 'X' == 'X', ...</code></li> </ul>"},{"location":"uutt/ut02/022_Fechas.html","title":"Manejo de fechas en Java","text":"<p>Dado que las clases base de manejo de fechas en Java son tan problem\u00e1ticas, surgieron alternativas a <code>Date</code> por parte de la comunidad. La m\u00e1s conocida y utilizada siempre ha sido la biblioteca Joda-Time, que es gratuita y Open Source. Tan popular era que sus desarrolladores participaron junto a Oracle en la definici\u00f3n de las nuevas clases oficiales para manejo de fechas en Java: las incluidas en el paquete <code>java.time</code>. Este paquete <code>java.time</code> incluye muchas clases, pero las b\u00e1sicas son:</p> <ul> <li><code>LocalDate</code>: representa a fechas sin la hora y nos facilita su manejo para declararlas, sumar y restar fechas y compararlas.</li> <li><code>LocalTime</code>: es id\u00e9ntica a la anterior pero para el manejo de horas, sin ninguna fecha asociada, pudiendo as\u00ed compararlas, sumar o restar tiempo a las mismas...</li> <li><code>LocalDateTime</code>: como puedes suponer, es una combinaci\u00f3n de las dos anteriores, que permite hacer lo mismo con fechas y horas simult\u00e1neamente.</li> <li><code>Instant</code>: es muy parecida a la anterior pero a la vez muy diferente. Se usa para almacenar un punto determinado en el tiempo, o sea con fecha y hora, pero guarda su valor como un timestamp de UNIX, es decir, en nanosegundos desde el epoch de UNIX (1/1/1970 a las 00:00) y usando la zona horaria UTC. Es muy \u00fatil para manejar momentos en el tiempo de manera neutra e intercambiarlo entre aplicaciones y sistemas, por lo que lo ver\u00e1s utilizado muy a menudo.</li> <li><code>ZonedDateTime</code>: esta clase es como la LocalDateTime pero teniendo en cuenta una zona horaria concreta, ya que las anteriores no la tienen en cuenta.</li> <li><code>Period</code>: esta clase auxiliar nos ayuda a obtener diferencias entre fechas en distintos periodos (segundos, minutos, d\u00edas...) y tambi\u00e9n a a\u00f1adir esas diferencias a las fechas.</li> <li><code>Duration</code>: esta es muy parecida a la anterior pero para manejo de horas exclusivamente.</li> </ul>"},{"location":"uutt/ut02/022_Fechas.html#construyendo-fechas-y-horas-con-javatime","title":"Construyendo fechas y horas con <code>java.time</code>","text":"<p>Estas clases producen instancias inmutables, al contrario de lo que pasaba con las antiguas clases Date de Java, por lo que son thread-safe. Dado que carecen de constructores p\u00fablicos, se instancian usando m\u00e9todos de tipo \"factor\u00eda\", es decir, tienen m\u00e9todos que construyen estas clases a partir de posibles par\u00e1metros que le pasemos.</p> <p>En concreto, todas las de manejo de fechas y horas disponen de tres m\u00e9todos importantes, que son:</p> <ul> <li><code>now()</code>: crean instancias nuevas a partir de la fecha y hora actual.</li> <li><code>of()</code>: construyen fechas y horas a partir de sus partes.</li> <li><code>with()</code>: modifican la fecha u hora actual en funci\u00f3n del par\u00e1metro que se le pase, con alguna cantidad (a\u00f1os, d\u00edas, horas...) o alguna clase de ajuste que enseguida estudiaremos.</li> </ul> <p>Vamos a ver <code>now()</code> en acci\u00f3n con algunas de estas clases</p> <pre><code>System.out.println(\"La fecha actual es: \" + LocalDate.now());\nSystem.out.println( \"La hora actual es: \" + LocalTime.now() );\nSystem.out.println( \"La fecha y hora actuales son: \" + LocalDateTime.now() ); \nSystem.out.println( \"El instante actual es: \" + Instant.now() );\nSystem.out.println( \"La fecha y hora actuales con zona horaria son: \" + ZonedDateTime.now() );\n</code></pre> <p>Al convertirlas a cadena para mostrarlas se generan en el formato ISO 8601, que es un est\u00e1ndar ampliamente aceptado. Luego veremos c\u00f3mo formatearlas de otro modo que nos interese m\u00e1s. Para controlar qu\u00e9 fechas y horas generamos podemos usar el m\u00e9todo factor\u00eda of() que admite ciertos par\u00e1metros en funci\u00f3n del tipo de dato utilizado.</p> <pre><code>System.out.println( \"Fecha de mi cumplea\u00f1os: \" + LocalDate.of(1984, Month.MAY, 23) );\n</code></pre> <p>F\u00edjate en que para el mes, aunque podr\u00eda haber utilizado los n\u00fameros del 1 al 12 para indicarlo, he usado una enumeraci\u00f3n espec\u00edfica que existe para ello llamada <code>Month</code>, cuyos miembros son los nombres de los meses en ingl\u00e9s. As\u00ed que mayo, que ser\u00eda el mes 5, se convierte en <code>Month.MAY</code>.</p>"},{"location":"uutt/ut02/023_ConstantesLiterales.html","title":"Contantes y literales","text":""},{"location":"uutt/ut02/023_ConstantesLiterales.html#constantes","title":"Constantes","text":"<p>Un programa puede contener ciertos valores que no deben cambiar durante su ejecuci\u00f3n. Estos valores se llaman constantes. Es por ello que se puede definir constante como \u201cUna constante es una zona de memoria que se referencia con un identificador, conocido como nombre de la constante, donde se almacena un valor que no puede cambiar durante la ejecuci\u00f3n del programa\u201d. La nomenclatura para definir las constantes es la siguiente:</p> <ul> <li>Todas las letras de cada palabra deben estar en may\u00fasculas</li> <li>Se separa cada palabra con un _</li> <li>Se declaran similar a las variables, con la diferencia de que el tipo de dato va despu\u00e9s de la palabra reservada final</li> </ul> <pre><code>final double PI = 3.141591; \nfinal int MIN_WIDTH = 4; \nfinal double TASAS = 0.045;\n</code></pre> <p>Las constantes hacen que el programa sea m\u00e1s f\u00e1cil de leer y verificar que sea correcto. Si es necesario cambiar una constante (por ejemplo, si cambian las tasas), todo lo que tendremos que hacer es cambiar la declaraci\u00f3n de la constante. No ser\u00e1 necesario buscar en todo el programa cada aparici\u00f3n de ese n\u00famero espec\u00edfico.</p>"},{"location":"uutt/ut02/023_ConstantesLiterales.html#los-literales","title":"Los literales","text":"<p>Un literal Java es un valor de tipo entero, real, l\u00f3gico, car\u00e1cter, cadena de caracteres o un valor nulo (null) que puede aparecer dentro de un programa.</p> <p><pre><code>int x = 25;\ndouble precio = 10.99;\nString mes = \"enero\"\n</code></pre> Los literales suelen aparecer en la asignaci\u00f3n de valores a las variables o formando parte de expresiones aritm\u00e9ticas o l\u00f3gicas.</p> <p>Cuando se utilizan literales, es muy importante tener en cuenta que Java es un lenguaje fuertemente tipado, esto quiere decir que realiza un control estricto de los tipos de datos que pueden contener las variables.</p>"},{"location":"uutt/ut02/023_ConstantesLiterales.html#palabras-reservadas","title":"Palabras reservadas","text":"<p>Las palabras reservadas son identificadores predefinidos que tienen un significado para el compilador y por tanto no pueden usarse como identificadores creados por el usuario en los programas.</p> Palabras reservadas"},{"location":"uutt/ut02/024_Variables.html","title":"Variables en Java","text":"<p>Las variables en Java es una forma de almacenar informaci\u00f3n en nuestro ordenador. Definimos variables asign\u00e1ndoles un nombre. De igual manera se puede acceder a la informaci\u00f3n que guardar las variable, simplemente accediendo por el nombre que le hemos dado. Es el ordenador el que se encarga de averiguar d\u00f3nde se almacena internamente en la memoria RAM del ordenador.</p> <p>Como su nombre indica \"variable\", se puede modificar el contenido que \u00e9sta almacena, es decir, es variable. Lo \u00fanico que tenemos que hacer es decirle al PC qu\u00e9 tipo de informaci\u00f3n queremos guardar en nuestra variable y darle un nombre. Existe diferentes tipos de informaci\u00f3n que podemos utilizar para definir nuestras variables. Se les conoce como tipos de datos o data types. Los tipos de datos son palabras reservas keywords en Java, es decir, no podemos utilizarlas fuera del contexto de tipo de datos. Para definir una variable, necesitamos especificar el tipo de datos, luego darle un nombre a nuestra variable, y opcionalmente, podemos agregar una expresi\u00f3n para inicializar la variable con un valor.</p> <p>Reglas para el nombrado de variables</p> <ul> <li>Tiene que comenzar con una letra o '_', nunca con n\u00fameros.</li> <li>Puede contener n\u00fameros. No debe contener espacios en blanco.</li> <li>No debe ser muy largo y debe expresar algo en el contexto.</li> <li>No se pueden usar palabras reservadas.</li> <li>May\u00fasculas y min\u00fasculas se tratan diferente.</li> </ul>"},{"location":"uutt/ut02/024_Variables.html#visibilidad-y-vida-de-las-variables","title":"Visibilidad y vida de las variables","text":"<p>Las variables son memorias reservadas para almacenar valores en RAM. Estas posiciones de memoria se liberan tan pronto como termina la vida de la variable. Seg\u00fan la vida de las variables, hay tres tipos de Variables.</p> <ol> <li>Variables locales: La vida permanece dentro de un bloque donde se ha declarado.</li> <li>Variables de instancia: Declaradas dentro de la clase pero fuera de los m\u00e9todos. No deber\u00eda ser est\u00e1tico.</li> <li>Variables est\u00e1ticas: es como una variable global. Declarado como est\u00e1tico en la clase pero fuera de los m\u00e9todos.</li> </ol>"},{"location":"uutt/ut02/024_Variables.html#visibilidad","title":"Visibilidad","text":"<p>En las variables locales, su \u00e1mbito y uso se encuentra dentro del m\u00e9todo o bloque en el que se defini\u00f3 y se destruyen despu\u00e9s de la ejecuci\u00f3n del m\u00e9todo. Es decir, no se puede usar una variable local fuera del m\u00e9todo actual. A las variables de instancia se puede acceder solo a trav\u00e9s de objetos de la clase para la que se defini\u00f3.</p> <p>Un campo / variable est\u00e1tico pertenece a la clase y se cargar\u00e1 en la memoria junto con la clase. Se invocan sin crear un objeto. (Usando el nombre de la clase como referencia). Solo hay una copia de la variable est\u00e1tica disponible en toda la clase, es decir, el valor de la variable est\u00e1tica ser\u00e1 el mismo en todos los objetos. Puede definir una variable est\u00e1tica utilizando la palabra clave static.</p>"},{"location":"uutt/ut02/024_Variables.html#scope-ambito","title":"Scope \u2013 \u00c1mbito","text":"<p>El alcance o \u00e1mbito (scope) de una variable es la parte de un programa en la que existe. En Java, el alcance de una variable comienza donde se declara y termina cuando se alcanza la llave de cierre del bloque que la contiene.</p> <p>Ejemplo</p> <pre><code>public static void main(String[] args) { \n    int x = 5;\n    for (int i = 1; i &lt;= 5; i++) {\n        int y = 10;\n        System.out.println(x) // \u00a1x todav\u00eda est\u00e1 dentro del alcance aqu\u00ed!\n    }\n    System.out.println(x) // \u00a1x todav\u00eda est\u00e1 dentro del alcance aqu\u00ed tambi\u00e9n! \n}\n</code></pre> <ul> <li>x est\u00e1 dentro del alcance entre su declaraci\u00f3n en la l\u00ednea 2 y la llave que la encierra en la l\u00ednea 8.</li> <li>y est\u00e1 dentro del alcance entre su declaraci\u00f3n en la l\u00ednea 4 y la llave que la encierra en la l\u00ednea 6.</li> <li>Las variables de bucle est\u00e1n dentro del alcance entre sus bucles for { }. Entonces, i est\u00e1 dentro del alcance entre las l\u00edneas 3 - 6. ```</li> </ul> <p>Dos variables con el mismo nombre no pueden existir dentro del mismo \u00e1mbito (<code>scope</code>).</p>"},{"location":"uutt/ut02/025_OperadoresExpresiones.html","title":"Operadores y expresiones","text":"<p>Los operadores son s\u00edmbolos especiales en Java que realizan operaciones entre uno o varios operandos y devuelve un resultado. Uno de los m\u00e1s usados es el operador suma (+) como ya hemos visto.</p> <ul> <li>Operando: Es cualquier t\u00e9rmino, que puede ser una variable o valor y que es manipulado por un operador.</li> <li>Expresi\u00f3n: Es una combinaci\u00f3n de literales, operadores, nombres de variables y par\u00e9ntesis que se utilizan para calcular un valor.</li> </ul> <p>Java examina la expresi\u00f3n de la derecha del signo igual y realiza el c\u00e1lculo de una expresi\u00f3n matem\u00e1tica. Despu\u00e9s asigna ese valor a la variable resultado. Podr\u00edamos complicar m\u00e1s la expresi\u00f3n utilizando operadores como par\u00e9ntesis, multiplicaciones, divisiones, etc.</p> <p>Las partes de una expresi\u00f3n deben estar ordenadas correctamente. Las reglas para las expresiones Java correctas son casi las mismas que las del \u00e1lgebra:</p> <ol> <li>Cada operador debe tener el n\u00famero correcto de operandos.<ul> <li>Multiplicaci\u00f3n *, Divisi\u00f3n /, Suma +, Resta: debe tener dos operandos, uno en cada lado.</li> <li>La negaci\u00f3n - y unario m\u00e1s + deben ir seguidos de un operando.</li> </ul> </li> <li>Los par\u00e9ntesis () pueden rodear una expresi\u00f3n legal para convertirla en operando.</li> </ol>"},{"location":"uutt/ut02/025_OperadoresExpresiones.html#operadores-aritmeticos","title":"Operadores aritm\u00e9ticos","text":"<p>Se utilizan para realizar operaciones aritm\u00e9ticas simples.</p> S\u00edmbolo Operaci\u00f3n Descripci\u00f3n + Suma Realiza la suma de los operandos. - Resta Realiza la resta de los operandos * Producto Multiplica los operandos. / Divisi\u00f3n Realiza la divisi\u00f3n. % M\u00f3dulo Calcula el resto."},{"location":"uutt/ut02/025_OperadoresExpresiones.html#operadores-relacionales","title":"Operadores relacionales","text":"<p>Estos operadores se utilizan para verificar relaciones como igualdad, mayor que, menor que. Devuelven el resultado booleano despu\u00e9s de la comparaci\u00f3n.</p> S\u00edmbolo Operaci\u00f3n Descripci\u00f3n == Igual a Devuelve verdadero si el valor de la izquierda del s\u00edmbolo es igual al de la derecha. != Distinto a Devuelve verdadero si el valor de la izquierda es distinto al de la derecha. &lt; Menor que Devuelve verdadero si el valor de la izquierda es menor que el de la derecha. &lt;= Menor o igual que Devuelve verdadero si el valor de la izquierda es menor o igual que el de la derecha. &gt; Mayor que Devuelve verdadero si el valor de la izquierda es mayor que el de la derecha. &gt;= Mayor o igual que Devuelve verdadero si el valor de la izquierda es mayor o igual al de la derecha."},{"location":"uutt/ut02/025_OperadoresExpresiones.html#operadores-logicos","title":"Operadores l\u00f3gicos","text":"<p>Estos operadores se utilizan para realizar operaciones l\u00f3gicas AND y OR. Se usa ampliamente en sentencias if-then o bucles para verificar condiciones, establecer un punto de salida de un bucle o la toma de decisiones.</p> S\u00edmbolo Operaci\u00f3n Descripci\u00f3n &amp;&amp; AND l\u00f3gico Devuelve verdadero cuando ambas condiciones son ciertas. <code>||</code> OR l\u00f3gico Devuelve verdadero si al menos una condici\u00f3n es cierta. <pre><code>int a = 20, b = 10, c= 10;\nSystem.out.println((b == c &amp;&amp; a == c)); //False \nSystem.out.println((a == c &amp;&amp; b == c)); //False \nSystem.out.println((a == b || b == c)); //True\n</code></pre>"},{"location":"uutt/ut02/025_OperadoresExpresiones.html#operadores-unitarios-o-unarios","title":"Operadores unitarios o unarios","text":"<p>Los operadores unarios solo necesitan un operando. Se usan para incrementar, disminuir o negar un valor. | S\u00edmbolo | Operaci\u00f3n | Descripci\u00f3n | |---|---|---| | ++ | Incremento | Incrementa el valor en 1 unidad. | | --| Decremento | El valor disminuye en 1 unidad. | | ! | NOT l\u00f3gico | Invierte un valor booleano. |</p> <p>Existen dos versiones de estos operadores:</p> <ul> <li> <p>Pre-incremento y pre-decremento. El valor se aumenta/disminuye primero y luego se calcula el resultado.</p> <pre><code>int a = 8, b = 1;\nb = ++a; //b=9, a=9\n</code></pre> </li> <li> <p>Post-Incremento y post-decremento: el valor se usa por primera vez para calcular el resultado y luego se incrementa o decrementa.</p> <pre><code>int a = 8, b = 1;\nb = a++;//b = 8, a = 9\n</code></pre> </li> </ul>"},{"location":"uutt/ut02/025_OperadoresExpresiones.html#operadores-de-bits","title":"Operadores de bits","text":"S\u00edmbolo Operaci\u00f3n Descripci\u00f3n &amp; AND Si ambos bits de entrada son 1, establece como resultado 1. De lo contrario 0. <code>||</code> OR Si por lo menos uno de los bits de entrada es 1, establece como resultado 1. De lo contrario 0. ^ XOR Si uno de los bits de entrada es 1 y el otro 0, establece como resultado 1. Si los bits son iguales establece 0. ~ NOT Invierte todos los bits y devuelve el resultado en complemento a 2."},{"location":"uutt/ut02/025_OperadoresExpresiones.html#operadores-de-asignacion","title":"Operadores de asignaci\u00f3n","text":"<p>Es uno de los operadores m\u00e1s usados, se representa con el s\u00edmbolo =. Se usa para asignar un valor a cualquier variable. Tiene una asociaci\u00f3n de derecha a izquierda, es decir, el valor dado en el lado derecho del operador se asigna a la variable de la izquierda y, por lo tanto, el valor del lado derecho debe declararse antes de usarlo o debe ser una constante. En muchos casos, el operador de asignaci\u00f3n se puede combinar con otros operadores para construir una versi\u00f3n m\u00e1s corta de la declaraci\u00f3n llamada Declaraci\u00f3n Compuesta (Compound Statement).</p> <ul> <li><code>+=</code>, para sumar el operando izquierdo con el operando derecho y luego asignarlo a la variable de la izquierda. <pre><code>int a = 5;\na += 5; // a = a + 5;\n</code></pre></li> <li><code>\u2013 =</code>, para restar el operando izquierdo con el operando derecho y luego asignarlo a la variable de la izquierda. <pre><code>int a = 5;\na -= 5; // a = a - 5;\n</code></pre></li> <li><code>*=</code>, para multiplicar el operando izquierdo con el operando derecho y luego asign\u00e1ndolo a la variable de la izquierda. <pre><code>int a = 5;\na *= 5; // a = a * 5;\n</code></pre></li> <li><code>/ =</code>, para dividir el operando izquierdo con el operando derecho y luego asignarlo a la variable de la izquierda. <pre><code>int a = 5;\na /= 5; // a = a / 5;\n</code></pre></li> <li><code>% =</code>, para asignar el m\u00f3dulo del operando izquierdo con el operando derecho y luego asignarlo a la variable de la izquierda. <pre><code>int a = 5;\na %= 5; // a = a % 5;\n</code></pre></li> </ul>"},{"location":"uutt/ut02/026_Precendia.html","title":"Precedencia","text":"<p>El orden de precedencia, es decir, como Java decide la prioridad al evaluar los operadores en una expresi\u00f3n:</p> <p>A mayor n\u00famero mayor es la prioridad.</p>"},{"location":"uutt/ut02/027_Casting.html","title":"Conversiones de tipos (casting entre tipos nativos)","text":""},{"location":"uutt/ut02/027_Casting.html#conversiones-por-defecto","title":"Conversiones por defecto","text":"<p>Las reglas de Java para saber el tipo de datos resultante de una expresi\u00f3n se siguen las siguientes reglas</p> Si alg\u00fan operando es El otro operando se transforma a double double float float long long byte or short int <p>Si se aplican dos reglas, se elige la que aparece primero en la tabla.</p>"},{"location":"uutt/ut02/027_Casting.html#conversiones-forzosas-casting-entre-tipos-nativos","title":"Conversiones forzosas (casting entre tipos nativos)","text":"<p>Es una forma de convertir un n\u00famero de un tipo a otro tipo de dato. Para hacerlo ponemos en par\u00e9ntesis el tipo de dato al que queremos convertirlo.</p> <pre><code>byte miByte = (byte) (14 / 2); //convierto la operaci\u00f3n divisi\u00f3n que devuelve un int a byte //Otra forma\nfloat a = 8.0f;\nint b = 10;\nb = (int) a;//convierto el tipo float a int\n</code></pre>"},{"location":"uutt/ut02/028_Comentarios.html","title":"Comentarios en l\u00ednea y multil\u00ednea","text":"<p>Un comentario es un texto que se escribe dentro de un programa con el fin de facilitar la comprensi\u00f3n del mismo. Los comentarios se utilizan para explicar y documentar el c\u00f3digo fuente. En Java se pueden utilizar tres tipos de comentarios:</p> <ul> <li>Comentario tradicional estilo C/C++. Empieza con los caracteres <code>/*</code> y acaba con <code>*/</code>. Pueden ocupar m\u00e1s de una l\u00ednea y pueden aparecer en cualquier lugar donde pueda aparear un espacio en blanco. No pueden anidarse.</li> </ul> Ejemplos de comentarios estilo C/C++:<pre><code>/* Programa Ecuaci\u00f3n segundo grado\nCalcula las soluciones de una ecuaci\u00f3n de segundo grado */ \n/* Lectura de datos por teclado */\n</code></pre> <ul> <li>Comentarios de una sola l\u00ednea. Comienzan con una doble barra ( <code>//</code> ) y se pueden extender hasta el final de la l\u00ednea. No tienen car\u00e1cter de terminaci\u00f3n.</li> </ul> Ejemplos de comentarios de una sola l\u00ednea<pre><code>// Programa Ecuaci\u00f3n segundo grado\n// Calcula las soluciones de una ecuaci\u00f3n de segundo grado int p; \n// precio del producto\n</code></pre> <ul> <li>Comentarios para documentaci\u00f3n. Realmente este tipo de comentario es el mismo que el de varias l\u00edneas con la diferencia de que la informaci\u00f3n que contenga ser\u00e1 usada para un procesamiento especial que lleva a cabo la herramienta <code>javadoc</code>. Se distingue del comentario de varias l\u00edneas porque se agrega un asterisco adicional al inicio del comentario.</li> </ul> <pre><code>/**\nEste tipo de comentarios los utiliza la\nherramienta javadoc\n*/\n</code></pre>"},{"location":"uutt/ut02/029_IOConsola.html","title":"Entrada y salida de datos por consola","text":"<p>Java viene con una biblioteca de clases que se puede usar para realizar tareas comunes. La biblioteca de clases de Java est\u00e1 organizada en un conjunto de paquetes, donde cada paquete contiene una colecci\u00f3n de clases relacionadas. En esta secci\u00f3n presentamos las clases System y Scanner que se utilizan para imprimir la salida y leer la entrada de un programa.</p> <p>El tipo m\u00e1s simple de interfaz de usuario es la interfaz de l\u00ednea de comandos, en la que la entrada se toma de la l\u00ednea de comandos a trav\u00e9s del teclado y la salida se muestra en la consola. Algunas aplicaciones Java utilizan este tipo de interfaz otros usan interfaz gr\u00e1fica como veremos m\u00e1s adelante.</p>"},{"location":"uutt/ut02/029_IOConsola.html#salida-de-la-informacion","title":"Salida de la informaci\u00f3n","text":"<p>En Java, cualquier origen o destino de I/O se considera un flujo de bytes o caracteres. Para realizar la salida, insertamos bytes o caracteres en la secuencia. Para realizar la entrada, extraemos bytes o caracteres del flujo (<code>stream</code>). Incluso los caracteres introducidos en un teclado, si se consideran como una secuencia de pulsaciones de teclas, se pueden representar como un stream.</p> <p>En Java, la I/O se maneja a trav\u00e9s de m\u00e9todos que pertenecen a clases contenidas en el paquete <code>java.io</code>. Ya hemos visto c\u00f3mo se usa el m\u00e9todo de salida <code>println()</code> para enviar una cadena a la consola.</p> <p>Los objetos <code>System.out</code> y <code>System.err</code> se pueden usar para escribir la salida en la consola. Como sugiere su nombre, el flujo de errores se usa principalmente para mensajes de error, mientras que el flujo de salida se usa para otras salidas impresas.</p> <p>La \u00fanica diferencia entre los m\u00e9todos <code>print()</code> y <code>println()</code> es que <code>println()</code> tambi\u00e9n imprimir\u00e1 un retorno de carro y un avance de l\u00ednea despu\u00e9s de imprimir sus datos, lo que permitir\u00e1 que la salida posterior se imprima en una nueva l\u00ednea.</p> <pre><code>System.out.print(\"Hola\"); \nSystem.out.print(\"mundo\"): \nSystem.out.println(\"Texto con salto de l\u00ednea\"); \nSystem.out.println(\"adi\u00f3s\");\n\nSalida:\n\nHolamundoTexto con salto de l\u00ednea \nadi\u00f3s\n</code></pre>"},{"location":"uutt/ut02/029_IOConsola.html#entrada-de-la-informacion","title":"Entrada de la informaci\u00f3n","text":"<p>Se ha agregado la clase <code>Scanner</code> al paquete <code>java.util</code> que permite la entrada de teclado sin forzar el programador para manejar las excepciones. La clase Scanner est\u00e1 dise\u00f1ada para ser una forma muy flexible de reconocer fragmentos de datos que se ajustan a patrones espec\u00edficos de cualquier flujo de entrada.</p> <p>Para usar la clase Scanner para la entrada de teclado, debemos crear una instancia de <code>Scanner</code> y asociarla con <code>System.in</code>. La clase tiene un constructor para este prop\u00f3sito, por lo que la declaraci\u00f3n</p> <pre><code>Scanner sc = new Scanner(System.in);\n</code></pre> <p>declara y crea una instancia de un objeto que se puede utilizar para la entrada del teclado. Despu\u00e9s de crear un objeto <code>Scanner</code>, podemos hacer una llamada a <code>nextInt()</code>, <code>nextDouble()</code>, o <code>next()</code> para leer, respectivamente, un entero, un n\u00famero real, o String del teclado.</p> <pre><code>public static void main(String[] args) {\nScanner sc = new Scanner (System.in); \nSystem.out.print(\"Introduce un n\u00famero: \");\nint num = sc.nextInt();//Read the integer \nSystem.out.println(\"El n\u00famero introducido es: \" + num);\n}\n</code></pre> <p>Cuando se ejecuta el m\u00e9todo <code>nextInt()</code>, no se ejecutan m\u00e1s declaraciones hasta que el m\u00e9todo devuelve un valor <code>int</code>. Normalmente, esto no sucede hasta que el usuario ha escrito los d\u00edgitos de un n\u00famero entero y presiona la tecla Intro.</p> <p>Para leer un String utilizamos el m\u00e9todo <code>next()</code>.</p> <p><pre><code>public static void main(String[] args) {\nScanner sc = new Scanner (System.in); \nSystem.out.print(\"Introduce una palabra: \");\nString str = sc.next();\nSystem.out.println(str);\n}\n</code></pre> Un objeto Scanner tiene un conjunto de cadenas de caracteres que separan o delimitan los fragmentos de datos que est\u00e1 buscando. De forma predeterminada, este conjunto de delimitadores consta de cualquier secuencia no vac\u00eda de caracteres en blanco, es decir, los caracteres de espacio, tabulaci\u00f3n, retorno y nueva l\u00ednea. Esto permitir\u00e1 al usuario ingresar varios n\u00fameros enteros separados por espacios antes de presionar la tecla Enter. En c\u00f3digo ser\u00eda:</p> <pre><code>System.out.print(\"Introduce dos n\u00fameros: \"); \nint num = sc.nextInt();\nint num2 = sc.nextInt();\n</code></pre> <p>Los espacios en blanco como delimitadores tambi\u00e9n significan que el m\u00e9todo <code>next()</code> no puede devolver una cadena vac\u00eda ni puede devolver una cadena que contenga espacios. Por ejemplo, considere el c\u00f3digo:</p> <p><pre><code>System.out.print(\"Introduce un texto separado por espacio en blanco: \"); \nString str = sc.next();\n</code></pre> Si se escribe \"Hola mundo\" y se presiona la tecla enter, la cadena str almacenar\u00e1 s\u00f3lo \"Hola\". Para que un objeto Scanner lea cadenas que contienen espacios, debemos usar el m\u00e9todo <code>nextLine()</code>:</p> <pre><code>String str = sc.nextLine();\n</code></pre>"},{"location":"uutt/ut02/Referencias.html","title":"Referencias","text":"<ul> <li>Web: Java 15. Precedencia de los Operadores Aritm\u00e9ticos en Java: Una Gu\u00eda Completa </li> <li>V\u00eddeo: Operadores L\u00f3gicos y Relacionales </li> <li>V\u00eddeo: VARIABLES en Java \u2615 Todo lo que ten\u00e9s que saber \u2705 </li> </ul>"},{"location":"uutt/ut02/Referencias.html#links-de-interes","title":"Links de inter\u00e9s","text":"<ul> <li>Web: Precedencia del operador</li> </ul>"},{"location":"uutt/ut02/ResumenUT.html","title":"Propuesta did\u00e1ctica","text":""},{"location":"uutt/ut02/ResumenUT.html#resultado-de-aprendizaje","title":"Resultado de aprendizaje","text":"RA1.CE <ul> <li>Reconoce la estructura de un programa inform\u00e1tico, identificando y relacionando los elementos propios del lenguaje de programaci\u00f3n utilizado.</li> </ul> <ul> <li>b. Se han creado proyectos de desarrollo de aplicaciones.</li> <li>c. Se han utilizado entornos integrados de desarrollo.</li> <li>d. Se han identificado los distintos tipos de variables y la utilidad espec\u00edfica de cada uno.</li> <li>e. Se ha modificado el c\u00f3digo de un programa para crear y utilizar variables.</li> <li>f.  Se han creado y utilizado constantes y literales.</li> <li>g. Se han clasificado, reconocido y utilizado en expresiones los operadores del lenguaje.</li> <li>h. Se ha comprobado el funcionamiento de las conversiones de tipo expl\u00edcitas e impl\u00edcitas.</li> <li>i.  Se han introducido comentarios en el c\u00f3digo.</li> </ul>"},{"location":"uutt/ut02/ResumenUT.html#contenidos","title":"Contenidos","text":"<p>La presente UT tratar\u00e1 los siguientes contenidos:</p> <ol> <li> <p>Tipos de datos</p> <ol> <li>Tipos nativos</li> <li>String</li> <li>Date</li> </ol> </li> <li> <p>Constantes y literales</p> <ol> <li>Las constantes</li> <li>Los literales</li> <li>Palabras reservadas</li> </ol> </li> <li> <p>Variables</p> <ol> <li>Visibilidad y vida de las variables</li> </ol> </li> <li> <p>Operadores y expresiones</p> <ol> <li>Operadores aritm\u00e9ticos</li> <li>Operadores relacionales</li> <li>Operadores l\u00f3gicos</li> <li>Operadores unitarios o unarios</li> <li>Operadores de bits</li> <li>Operadores de asignaci\u00f3n</li> </ol> </li> <li> <p>Precedencia de operadores</p> </li> <li>Conversiones de tipos (casting entre tipos nativos)</li> <li>Comentarios en l\u00ednea y multil\u00ednea</li> <li>Programaci\u00f3n de la consola: entrada y salida de informaci\u00f3n</li> </ol>"},{"location":"uutt/ut02/ResumenUT.html#programacion-de-aula","title":"Programaci\u00f3n de aula","text":"<p>Sesi\u00f3n</p> <p>Fecha</p> <p>Conceptos</p> <p>Actividades</p> <p>01</p> <p>/09/2024</p> <p></p> <p></p>"}]}